/* eslint-disable no-unused-vars */
/* eslint-disable no-useless-escape */
import User from "../models/contact.js";
import UserProfile from "../models/profile.js";
import expressAsyncHandler from "express-async-handler";
import { hashPassword } from "../utils/password.js";
import profileModel from "../models/profile.js";

const getContacts  = expressAsyncHandler(async (req, res, next) => {
    const user = await User.find({}).select('-password').lean();//( V√≠ d·ª• khi find({}).select(‚Äú-password‚Äù) v·ªÅ th√¨ n√≥ s·∫Ω find ra h·∫øt data User tr·ª´ password)

    if (user.length === 0) {
        res.status(404);
        const error = new Error("User not found");

        next(error);
    } else {
        res.status (200).json(user);
    }
});


const createContact = expressAsyncHandler (async (req,res) => {
    const { fullname, password, email, phone } = req.body;//l·∫•y fullname, password, email, phone b√™n ph√≠a client
    
    try {
        //validate xem c√≥ fullname, password, email, phone hay kh√¥ng
        if (!fullname || !password || !email || !phone) {
            res.status(400);
            throw new Error("Error create!");
        }
        //T·∫°o m·ªõi 1 ƒë·ªëi t∆∞·ª£ng trong b·∫£ng profileModel (l√† b·∫£ng profile trong database) 
        const newProfile = new profileModel({
            fullname, 
            avatar: '',
            email,
            address: '', 
            phone,
            products: {
                cart: [],
                vouchers: [],
            }
        });
        await newProfile.save();//sau khi t·∫°o m·ªõi xong th√¨ s·∫Ω l∆∞u v√†o b·∫£ng profile 

        const hashPass = await hashPassword(password);//M√£ h√≥a pass gi√∫p tƒÉng b·∫£o m·∫≠t c·ªßa ng∆∞·ªùi d√πng
        console.log('hashPassword: ', hashPass);

        //T·∫°o m·ªõi 1 ƒë·ªëi t∆∞·ª£ng trong b·∫£ng contactModel (l√† b·∫£ng user trong database) 
        const user = await User.create({ 
            fullname, 
            password: hashPass, 
            email, 
            phone,
            profile: newProfile._id,//id c·ªßa profile v·ªßa m·ªõi t·∫°o ·ªü tr√™n
        });

        await user.save();//sau khi t·∫°o m·ªõi xong th√¨ s·∫Ω l∆∞u v√†o b·∫£ng user
        
        const formattedUser = await User.findOne({ _id: user._id })//L·∫•y id c·ªßa user b·∫±ng c√°ch d√πng finOne()
            .populate({ path: 'profile', strictPopulate: false })//v√¨ trong user c√≥ ref c·ªßa b·∫£ng profile trong DB n√™n c√≥ th·ªÉ l·∫•y d·ªØ li·ªáu c·ªßa b·∫£ng profile trong DB b·∫±ng c√°ch d√πng populate() mu·ªën path ƒë·∫øn b·∫£ng profile ƒë·ªÉ l·∫•y d·ªØ li·ªáu th√¨ ph·∫£i t·∫Øt b·∫£o m·∫≠t b·∫±ng c√°ch d√πng strictPopulate: false 
            .select('-password')
            .lean();//lean()gi√∫p t√¨m v√† ƒë·ªçc nhanh h∆°n
        
        const UserId = formattedUser._id;
        const ProfileID = formattedUser.profile._id
        const newID = {UserId,ProfileID}
        delete formattedUser._id;
        delete formattedUser.profile._id;
        
        console.log('formattedUser: ', formattedUser);
        return res.status(202).json({ id: newID , ...formattedUser });
        //return res.status(202).json(formattedUser);
            
        
    } catch (error) {
        // throw new Error(error.message);
        console.log(error.message);
        return res.status(400).json({
            status: 'fail',
            message: error.message.replace(/\"/g, "")
        });
    }
});


const getContact = expressAsyncHandler (async (req,res) => {
    const id = req.params.id;
    console.log("üöÄ ~ file: contactController.js:42 ~ getContact ~ id:", id)
    
    const user = await UserProfile.findById(id).lean();

    console.log('user: ', user);
    if (!user) {
        res.status(404).json({ error: 'User not found' });
    } else {
        res.status(201).json(user);
    }

});

const updateContact = expressAsyncHandler (async (req,res) => {
    const userId = req.params.id;
    const { fullname, email, phone } = req.body;
    const update = { fullname, email, phone };
    const user = await User.findByIdAndUpdate(userId,  update,  { new: true });
    try {
        if (!user) {
            res.status(404).json({ error: 'User not found' });
        } else {
            res.status(201).json(user);
        }
    } catch (error) {
        res.status(400);
        throw new Error(error.message);
    }

});

const deleteContact = expressAsyncHandler(async (req,res) => {
    const id = req.params.id;
    const user = await User.findByIdAndDelete(id);
    if(!user){
        return res.status(404).json({message:'Kh√¥ng c√≥ user'})
    }
    const idProfile = user.profile._id; 
    const profile = await profileModel.findByIdAndDelete(idProfile)
    res.status(201).json(
        {message:`Delete user: ${user.fullname} by ID user ${req.params.id} and ID profile ${idProfile}`});
});

export {
    getContacts,
    createContact,
    getContact,
    updateContact,
    deleteContact
}